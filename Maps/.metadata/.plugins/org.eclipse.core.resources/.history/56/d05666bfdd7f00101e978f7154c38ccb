Function.prototype.method=function(name,func){
	if(!this.prototype[name]){
		this.prototype[name]=func;
		return this;
	}
};

String.method("format", function() {
	  var s = arguments[0];
	  for (var i = 0; i < arguments.length - 1; i++) {       
	    var reg = new RegExp("\\{" + i + "\\}", "gm");             
	    s = s.replace(reg, arguments[i + 1]);
	  }

	  return s;
});

Number.method("toRad",function(){
	return this * Math.PI / 180;
});


var set=function(){
	var uniqueArray=[];
	return{
		add:function(elem){
			if(!this.contains(elem)) uniqueArray.push(elem);
		},
		contains:function(elem){
			var contains=false;
			var i=0;
			for(i=0;i<uniqueArray.length;i++){
				if(uniqueArray[i]===elem){
					contains=true;
					break;
				}
			}
			return contains;
		}		
	};
};